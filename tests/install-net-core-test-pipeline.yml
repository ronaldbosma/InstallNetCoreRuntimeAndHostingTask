# This pipeline is used to test the custom InstallNetCoreRuntimeAndHosting task.
#
# This pipeline:
# - provisions a server in Azure and registers it in an Azure Pipelines environment
# - install all version of the .NET Core Runtime & Hosting bundle on the server and verify that it was successful
# - unregister the server from the Azure Pipelines environment and remove the Azure resource group
# 
# The following variables need to be provided to the pipeline:
# - Token         : a Personal Access Token with the scope 'Environment (Read & manage)'.
# - AdminPassword : a password for the Admin user of the provisioned Azure server.


trigger: none


variables:
  azureSubscription: 'Azure Visual Studio Enterprise'
  resourceGroup: 'net-core-test-$(Build.BuildNumber)'
  environmentName: 'net-core-test'


stages:
- stage: 'Test'
  condition: succeeded()
  jobs:
  - deployment: 'Test'
    environment:
      name: '$(environmentName)'
      resourceType: 'VirtualMachine'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: PowerShell@2
            displayName: 'Assert is 2.1 installed'
            inputs:
              targetType: 'inline'
              script: |
                $version = "2.1";
                $installedSoftware = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*;
                
                $isRuntimeInstalled = ($installedSoftware | Where-Object { $_.DisplayName -match "Microsoft .NET (Core )?Runtime - $version.+" }) -ne $null
                if ($isRuntimeInstalled) {
                  Write-Host "Microsoft .NET (Core) Runtime version $Version is installed"
                } else {
                  Write-Error "Microsoft .NET (Core) Runtime version $version is not installed"
                }

                $isHostInstalled = ($installedSoftware | Where-Object { $_.DisplayName -match "Microsoft .NET (Core )?Host - $version.+" }) -ne $null
                if ($isHostInstalled) {
                  Write-Host "Microsoft .NET (Core) Host version $Version is installed"
                } else {
                  Write-Error "Microsoft .NET (Core) Host version $version is not installed"
                }

          - task: PowerShell@2
            displayName: 'Assert is 5.1 installed'
            inputs:
              targetType: 'inline'
              script: |
                $version = "5.1";
                $installedSoftware = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*;

                $isRuntimeInstalled = ($installedSoftware | Where-Object { $_.DisplayName -match "Microsoft .NET (Core )?Runtime - $version.+" }) -ne $null
                if ($isRuntimeInstalled) {
                  Write-Host "Microsoft .NET (Core) Runtime version $Version is installed"
                } else {
                  Write-Error "Microsoft .NET (Core) Runtime version $version is not installed"
                }

                $isHostInstalled = ($installedSoftware | Where-Object { $_.DisplayName -match "Microsoft .NET (Core )?Host - $version.+" }) -ne $null
                if ($isHostInstalled) {
                  Write-Host "Microsoft .NET (Core) Host version $Version is installed"
                } else {
                  Write-Error "Microsoft .NET (Core) Host version $version is not installed"
                }


- stage: 'ProvisionTestEnvironment'
  condition: false
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Provision and register Azure VM'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: pscore
        scriptPath: './tests/scripts/provision-azure-vm.ps1'
        arguments:
          -ResourceGroup '$(resourceGroup)' `
          -AdminPassword '$(AdminPassword)' `
          -OrganizationUrl '$(System.CollectionUri)' `
          -TeamProject '$(System.TeamProject)' `
          -Environment '$(environmentName)' `
          -Token '$(Token)'


- stage: 'InstallNetCore'
  dependsOn: 'ProvisionTestEnvironment'
  condition: false
  jobs:
  - deployment: 'InstallNetCore'
    environment:
      name: '$(environmentName)'
      resourceType: 'VirtualMachine'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: InstallNetCoreRuntimeAndHosting@1
            displayName: 'Install 2.1'
            inputs:
              version: '2.1'
              useProxy: false
              norestart: true
              iisReset: true
          - task: PowerShell@2
            displayName: 'Assert is 2.1 installed'
            inputs:
              targetType: 'inline'
              script: |
                $version = "2.1";
                $installedSoftware = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*;
                $isRuntimeInstalled = ($installedSoftware | Where-Object { $_.DisplayName -match "Microsoft .NET (Core )?Runtime - $version.+" }) -ne $null
                if (-not $isRuntimeInstalled) {
                    Write-Error "Microsoft .NET (Core) Runtime version $version is not installed"
                }

                $isHostInstalled = ($installedSoftware | Where-Object { $_.DisplayName -match "Microsoft .NET (Core )?Host - $version.+" }) -ne $null
                if (-not $isHostInstalled) {
                    Write-Error "Microsoft .NET (Core) Host version $version is not installed"
                }
          - task: PowerShell@2
            displayName: 'Assert is 5.0 installed'
            inputs:
              targetType: 'inline'
              script: |
                $version = "5.0";
                $installedSoftware = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*;
                $isRuntimeInstalled = ($installedSoftware | Where-Object { $_.DisplayName -match "Microsoft .NET (Core )?Runtime - $version.+" }) -ne $null
                if (-not $isRuntimeInstalled) {
                    Write-Error "Microsoft .NET (Core) Runtime version $version is not installed"
                }

                $isHostInstalled = ($installedSoftware | Where-Object { $_.DisplayName -match "Microsoft .NET (Core )?Host - $version.+" }) -ne $null
                if (-not $isHostInstalled) {
                    Write-Error "Microsoft .NET (Core) Host version $version is not installed"
                }
          - task: InstallNetCoreRuntimeAndHosting@1
            displayName: 'Install 2.2'
            inputs:
              version: '2.2'
              useProxy: false
              norestart: true
              iisReset: true
          - task: InstallNetCoreRuntimeAndHosting@1
            displayName: 'Install 3.0'
            inputs:
              version: '3.0'
              useProxy: false
              norestart: true
              iisReset: true
          - task: InstallNetCoreRuntimeAndHosting@1
            displayName: 'Install 3.1'
            inputs:
              version: '3.1'
              useProxy: false
              norestart: true
              iisReset: true
          - task: InstallNetCoreRuntimeAndHosting@1
            displayName: 'Install 5.0'
            inputs:
              version: '5.0'
              useProxy: false
              norestart: true
              iisReset: true


- stage: 'DeleteTestServer'
  dependsOn: 'InstallNetCore'
  condition: false
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Unregister And delete Azure VM'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: pscore
        scriptPath: './tests/scripts/delete-azure-vms.ps1'
        arguments:
          -ResourceGroup '$(resourceGroup)' `
          -Token '$(Token)'